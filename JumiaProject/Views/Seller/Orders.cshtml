@model IEnumerable<Order>

@{
    Layout = "~/Views/Shared/_SellerLayout.cshtml";
    ViewData["Title"] = "Orders";
}

<style>
    /* Enhanced Styles */
    .page-header {
        margin-bottom: 2rem;
    }

    .page-title {
        color: #2a2a2a;
        font-weight: 700;
        font-size: 1.75rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .page-title i {
        color: #2a2a2a;
        font-size: 1.5rem;
    }

    /* Pagination Styles */
    .pagination {
        gap: 0.25rem;
    }

    .page-link {
        border: 1px solid #e9ecef;
        color: #6c757d;
        padding: 0.5rem 0.75rem;
        min-width: 2.5rem;
        text-align: center;
        margin: 0;
        transition: all 0.2s;
    }

    .page-link:hover {
        background-color: #f8f9fa;
        color: #dc8e26;
        border-color: #dc8e26;
    }

    .page-link:focus {
        box-shadow: none;
        border-color: #dc8e26;
    }

    .page-item.active .page-link {
        background-color: #dc8e26;
        border-color: #dc8e26;
        color: white;
    }

    .page-item.disabled .page-link {
        background-color: #f8f9fa;
        border-color: #e9ecef;
        color: #6c757d;
        opacity: 0.5;
    }

    /* Table Styles */
    .table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #2a2a2a;
    }

    /* Items per page select */
    .form-select-sm {
        border-color: #e9ecef;
        color: #6c757d;
    }

    .form-select-sm:focus {
        border-color: #dc8e26;
        box-shadow: none;
    }
</style>

<div class="container-fluid py-4">
    <!-- Header with Search and Filter Controls -->
    <div class="row align-items-center mb-4">
        <div class="col-md-6">
            <h2 class="page-title">
                <i class="bi bi-cart3"></i>
                Orders
            </h2>
        </div>
        <div class="col-md-6 d-flex justify-content-end">
            <button type="button" class="btn" style="background-color: #d3d3d3; color: black;" data-bs-toggle="modal" data-bs-target="#filterModal">
                <i class="bi bi-funnel me-1"></i> Filter
            </button>
        </div>
    </div>

    <!-- Product Table -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="ordersTable">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                            <th>Shipping Method</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model)
                        {
                            <tr>
                                <td>@order.OrderId</td>
                                <td>@(order.OrderDate.HasValue ? order.OrderDate.Value.ToString("MM/dd/yyyy") : "N/A")</td>
                                <td>$@order.TotalAmount.ToString("0.00")</td>
                                <td>@order.OrderStatus</td>
                                <td>@order.ShippingMethod</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Table Footer with Pagination -->
        <div class="card-footer bg-white py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <p class="mb-0">Showing <span id="currentStart">1</span> to <span id="currentEnd">10</span> of <span id="totalItems">@Model.Count()</span> Orders</p>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-end align-items-center">
                        <div class="me-3">
                            <label class="me-2">Show</label>
                            <select class="form-select form-select-sm d-inline-block w-auto" id="itemsPerPage">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                        <nav aria-label="Orders pagination">
                            <ul class="pagination mb-0" id="pagination">
                                <!-- Pagination will be populated by JavaScript -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filter Modal -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Filter Orders</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="filterForm">

                    <!-- Price Range Filter -->
                    <div class="mb-4">
                        <label class="form-label">Price Range</label>
                        <div class="row align-items-center">
                            <div class="col-5">
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="minPrice" placeholder="Min" min="0">
                                </div>
                            </div>
                            <div class="col-2 text-center">to</div>
                            <div class="col-5">
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="maxPrice" placeholder="Max" min="0">
                                </div>
                            </div>
                        </div>
                        <div class="mt-2">
                            <input type="range" class="form-range" id="priceRange" min="0" max="1000" step="10">
                        </div>
                    </div>

                    <!-- Date Range Filter -->
                    <div class="mb-4">
                        <label class="form-label">Order Date Range</label>
                        <div class="row align-items-center">
                            <div class="col-5">
                                <input type="date" class="form-control" id="startDate">
                            </div>
                            <div class="col-2 text-center">to</div>
                            <div class="col-5">
                                <input type="date" class="form-control" id="endDate">
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="resetFilters">Reset Filters</button>
                <button type="button" class="btn btn-primary" id="applyFilters" data-bs-dismiss="modal">Apply Filters</button>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="~/css/seller-orders.css">

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const itemsPerPageSelect = document.getElementById('itemsPerPage');
            const paginationContainer = document.getElementById('pagination');
            const currentStartSpan = document.getElementById('currentStart');
            const currentEndSpan = document.getElementById('currentEnd');
            const totalItemsSpan = document.getElementById('totalItems');
            
            let currentPage = 1;
            const totalItems = parseInt(totalItemsSpan.textContent);
            
            function updatePagination() {
                const itemsPerPage = parseInt(itemsPerPageSelect.value);
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                
                // Update showing text
                const start = ((currentPage - 1) * itemsPerPage) + 1;
                const end = Math.min(currentPage * itemsPerPage, totalItems);
                currentStartSpan.textContent = start;
                currentEndSpan.textContent = end;
                
                // Generate pagination HTML
                let paginationHtml = '';
                
                // Previous button
                paginationHtml += `
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                    </li>
                `;
                
                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 || // First page
                        i === totalPages || // Last page
                        (i >= currentPage - 1 && i <= currentPage + 1) // Pages around current
                    ) {
                        paginationHtml += `
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" href="#" data-page="${i}">${i}</a>
                            </li>
                        `;
                    } else if (
                        i === currentPage - 2 ||
                        i === currentPage + 2
                    ) {
                        paginationHtml += `
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `;
                    }
                }
                
                // Next button
                paginationHtml += `
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    </li>
                `;
                
                paginationContainer.innerHTML = paginationHtml;
                
                // Add click handlers
                paginationContainer.querySelectorAll('.page-link[data-page]').forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const newPage = parseInt(this.dataset.page);
                        if (!isNaN(newPage) && newPage > 0 && newPage <= totalPages) {
                            currentPage = newPage;
                            updatePagination();
                            // Here you would typically fetch the new page of data
                            // fetchPageData(currentPage, itemsPerPage);
                        }
                    });
                });
            }
            
            // Listen for items per page changes
            itemsPerPageSelect.addEventListener('change', function() {
                currentPage = 1; // Reset to first page
                updatePagination();
            });
            
            // Initial pagination setup
            updatePagination();
        });
    </script>
}
